
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Info` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Info
 * 
 */
export type InfoModel = runtime.Types.Result.DefaultSelection<Prisma.$InfoPayload>

export type AggregateInfo = {
  _count: InfoCountAggregateOutputType | null
  _min: InfoMinAggregateOutputType | null
  _max: InfoMaxAggregateOutputType | null
}

export type InfoMinAggregateOutputType = {
  id: string | null
  name: string | null
  userId: string | null
}

export type InfoMaxAggregateOutputType = {
  id: string | null
  name: string | null
  userId: string | null
}

export type InfoCountAggregateOutputType = {
  id: number
  name: number
  userId: number
  _all: number
}


export type InfoMinAggregateInputType = {
  id?: true
  name?: true
  userId?: true
}

export type InfoMaxAggregateInputType = {
  id?: true
  name?: true
  userId?: true
}

export type InfoCountAggregateInputType = {
  id?: true
  name?: true
  userId?: true
  _all?: true
}

export type InfoAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Info to aggregate.
   */
  where?: Prisma.InfoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Infos to fetch.
   */
  orderBy?: Prisma.InfoOrderByWithRelationInput | Prisma.InfoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.InfoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Infos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Infos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Infos
  **/
  _count?: true | InfoCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: InfoMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: InfoMaxAggregateInputType
}

export type GetInfoAggregateType<T extends InfoAggregateArgs> = {
      [P in keyof T & keyof AggregateInfo]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateInfo[P]>
    : Prisma.GetScalarType<T[P], AggregateInfo[P]>
}




export type InfoGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.InfoWhereInput
  orderBy?: Prisma.InfoOrderByWithAggregationInput | Prisma.InfoOrderByWithAggregationInput[]
  by: Prisma.InfoScalarFieldEnum[] | Prisma.InfoScalarFieldEnum
  having?: Prisma.InfoScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: InfoCountAggregateInputType | true
  _min?: InfoMinAggregateInputType
  _max?: InfoMaxAggregateInputType
}

export type InfoGroupByOutputType = {
  id: string
  name: string
  userId: string
  _count: InfoCountAggregateOutputType | null
  _min: InfoMinAggregateOutputType | null
  _max: InfoMaxAggregateOutputType | null
}

type GetInfoGroupByPayload<T extends InfoGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<InfoGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof InfoGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], InfoGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], InfoGroupByOutputType[P]>
      }
    >
  >



export type InfoWhereInput = {
  AND?: Prisma.InfoWhereInput | Prisma.InfoWhereInput[]
  OR?: Prisma.InfoWhereInput[]
  NOT?: Prisma.InfoWhereInput | Prisma.InfoWhereInput[]
  id?: Prisma.StringFilter<"Info"> | string
  name?: Prisma.StringFilter<"Info"> | string
  userId?: Prisma.StringFilter<"Info"> | string
  metadata?: Prisma.MetadataListRelationFilter
  owner?: Prisma.XOR<Prisma.OwnerScalarRelationFilter, Prisma.OwnerWhereInput>
}

export type InfoOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  metadata?: Prisma.MetadataOrderByRelationAggregateInput
  owner?: Prisma.OwnerOrderByWithRelationInput
}

export type InfoWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.InfoWhereInput | Prisma.InfoWhereInput[]
  OR?: Prisma.InfoWhereInput[]
  NOT?: Prisma.InfoWhereInput | Prisma.InfoWhereInput[]
  name?: Prisma.StringFilter<"Info"> | string
  userId?: Prisma.StringFilter<"Info"> | string
  metadata?: Prisma.MetadataListRelationFilter
  owner?: Prisma.XOR<Prisma.OwnerScalarRelationFilter, Prisma.OwnerWhereInput>
}, "id">

export type InfoOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  _count?: Prisma.InfoCountOrderByAggregateInput
  _max?: Prisma.InfoMaxOrderByAggregateInput
  _min?: Prisma.InfoMinOrderByAggregateInput
}

export type InfoScalarWhereWithAggregatesInput = {
  AND?: Prisma.InfoScalarWhereWithAggregatesInput | Prisma.InfoScalarWhereWithAggregatesInput[]
  OR?: Prisma.InfoScalarWhereWithAggregatesInput[]
  NOT?: Prisma.InfoScalarWhereWithAggregatesInput | Prisma.InfoScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Info"> | string
  name?: Prisma.StringWithAggregatesFilter<"Info"> | string
  userId?: Prisma.StringWithAggregatesFilter<"Info"> | string
}

export type InfoCreateInput = {
  id?: string
  name: string
  metadata?: Prisma.MetadataCreateNestedManyWithoutInfoInput
  owner: Prisma.OwnerCreateNestedOneWithoutInfoInput
}

export type InfoUncheckedCreateInput = {
  id?: string
  name: string
  userId: string
  metadata?: Prisma.MetadataUncheckedCreateNestedManyWithoutInfoInput
}

export type InfoUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  metadata?: Prisma.MetadataUpdateManyWithoutInfoNestedInput
  owner?: Prisma.OwnerUpdateOneRequiredWithoutInfoNestedInput
}

export type InfoUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  metadata?: Prisma.MetadataUncheckedUpdateManyWithoutInfoNestedInput
}

export type InfoCreateManyInput = {
  id?: string
  name: string
  userId: string
}

export type InfoUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type InfoUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type InfoCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type InfoMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type InfoMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type InfoListRelationFilter = {
  every?: Prisma.InfoWhereInput
  some?: Prisma.InfoWhereInput
  none?: Prisma.InfoWhereInput
}

export type InfoOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type InfoScalarRelationFilter = {
  is?: Prisma.InfoWhereInput
  isNot?: Prisma.InfoWhereInput
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type InfoCreateNestedManyWithoutOwnerInput = {
  create?: Prisma.XOR<Prisma.InfoCreateWithoutOwnerInput, Prisma.InfoUncheckedCreateWithoutOwnerInput> | Prisma.InfoCreateWithoutOwnerInput[] | Prisma.InfoUncheckedCreateWithoutOwnerInput[]
  connectOrCreate?: Prisma.InfoCreateOrConnectWithoutOwnerInput | Prisma.InfoCreateOrConnectWithoutOwnerInput[]
  createMany?: Prisma.InfoCreateManyOwnerInputEnvelope
  connect?: Prisma.InfoWhereUniqueInput | Prisma.InfoWhereUniqueInput[]
}

export type InfoUncheckedCreateNestedManyWithoutOwnerInput = {
  create?: Prisma.XOR<Prisma.InfoCreateWithoutOwnerInput, Prisma.InfoUncheckedCreateWithoutOwnerInput> | Prisma.InfoCreateWithoutOwnerInput[] | Prisma.InfoUncheckedCreateWithoutOwnerInput[]
  connectOrCreate?: Prisma.InfoCreateOrConnectWithoutOwnerInput | Prisma.InfoCreateOrConnectWithoutOwnerInput[]
  createMany?: Prisma.InfoCreateManyOwnerInputEnvelope
  connect?: Prisma.InfoWhereUniqueInput | Prisma.InfoWhereUniqueInput[]
}

export type InfoUpdateManyWithoutOwnerNestedInput = {
  create?: Prisma.XOR<Prisma.InfoCreateWithoutOwnerInput, Prisma.InfoUncheckedCreateWithoutOwnerInput> | Prisma.InfoCreateWithoutOwnerInput[] | Prisma.InfoUncheckedCreateWithoutOwnerInput[]
  connectOrCreate?: Prisma.InfoCreateOrConnectWithoutOwnerInput | Prisma.InfoCreateOrConnectWithoutOwnerInput[]
  upsert?: Prisma.InfoUpsertWithWhereUniqueWithoutOwnerInput | Prisma.InfoUpsertWithWhereUniqueWithoutOwnerInput[]
  createMany?: Prisma.InfoCreateManyOwnerInputEnvelope
  set?: Prisma.InfoWhereUniqueInput | Prisma.InfoWhereUniqueInput[]
  disconnect?: Prisma.InfoWhereUniqueInput | Prisma.InfoWhereUniqueInput[]
  delete?: Prisma.InfoWhereUniqueInput | Prisma.InfoWhereUniqueInput[]
  connect?: Prisma.InfoWhereUniqueInput | Prisma.InfoWhereUniqueInput[]
  update?: Prisma.InfoUpdateWithWhereUniqueWithoutOwnerInput | Prisma.InfoUpdateWithWhereUniqueWithoutOwnerInput[]
  updateMany?: Prisma.InfoUpdateManyWithWhereWithoutOwnerInput | Prisma.InfoUpdateManyWithWhereWithoutOwnerInput[]
  deleteMany?: Prisma.InfoScalarWhereInput | Prisma.InfoScalarWhereInput[]
}

export type InfoUncheckedUpdateManyWithoutOwnerNestedInput = {
  create?: Prisma.XOR<Prisma.InfoCreateWithoutOwnerInput, Prisma.InfoUncheckedCreateWithoutOwnerInput> | Prisma.InfoCreateWithoutOwnerInput[] | Prisma.InfoUncheckedCreateWithoutOwnerInput[]
  connectOrCreate?: Prisma.InfoCreateOrConnectWithoutOwnerInput | Prisma.InfoCreateOrConnectWithoutOwnerInput[]
  upsert?: Prisma.InfoUpsertWithWhereUniqueWithoutOwnerInput | Prisma.InfoUpsertWithWhereUniqueWithoutOwnerInput[]
  createMany?: Prisma.InfoCreateManyOwnerInputEnvelope
  set?: Prisma.InfoWhereUniqueInput | Prisma.InfoWhereUniqueInput[]
  disconnect?: Prisma.InfoWhereUniqueInput | Prisma.InfoWhereUniqueInput[]
  delete?: Prisma.InfoWhereUniqueInput | Prisma.InfoWhereUniqueInput[]
  connect?: Prisma.InfoWhereUniqueInput | Prisma.InfoWhereUniqueInput[]
  update?: Prisma.InfoUpdateWithWhereUniqueWithoutOwnerInput | Prisma.InfoUpdateWithWhereUniqueWithoutOwnerInput[]
  updateMany?: Prisma.InfoUpdateManyWithWhereWithoutOwnerInput | Prisma.InfoUpdateManyWithWhereWithoutOwnerInput[]
  deleteMany?: Prisma.InfoScalarWhereInput | Prisma.InfoScalarWhereInput[]
}

export type InfoCreateNestedOneWithoutMetadataInput = {
  create?: Prisma.XOR<Prisma.InfoCreateWithoutMetadataInput, Prisma.InfoUncheckedCreateWithoutMetadataInput>
  connectOrCreate?: Prisma.InfoCreateOrConnectWithoutMetadataInput
  connect?: Prisma.InfoWhereUniqueInput
}

export type InfoUpdateOneRequiredWithoutMetadataNestedInput = {
  create?: Prisma.XOR<Prisma.InfoCreateWithoutMetadataInput, Prisma.InfoUncheckedCreateWithoutMetadataInput>
  connectOrCreate?: Prisma.InfoCreateOrConnectWithoutMetadataInput
  upsert?: Prisma.InfoUpsertWithoutMetadataInput
  connect?: Prisma.InfoWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.InfoUpdateToOneWithWhereWithoutMetadataInput, Prisma.InfoUpdateWithoutMetadataInput>, Prisma.InfoUncheckedUpdateWithoutMetadataInput>
}

export type InfoCreateWithoutOwnerInput = {
  id?: string
  name: string
  metadata?: Prisma.MetadataCreateNestedManyWithoutInfoInput
}

export type InfoUncheckedCreateWithoutOwnerInput = {
  id?: string
  name: string
  metadata?: Prisma.MetadataUncheckedCreateNestedManyWithoutInfoInput
}

export type InfoCreateOrConnectWithoutOwnerInput = {
  where: Prisma.InfoWhereUniqueInput
  create: Prisma.XOR<Prisma.InfoCreateWithoutOwnerInput, Prisma.InfoUncheckedCreateWithoutOwnerInput>
}

export type InfoCreateManyOwnerInputEnvelope = {
  data: Prisma.InfoCreateManyOwnerInput | Prisma.InfoCreateManyOwnerInput[]
  skipDuplicates?: boolean
}

export type InfoUpsertWithWhereUniqueWithoutOwnerInput = {
  where: Prisma.InfoWhereUniqueInput
  update: Prisma.XOR<Prisma.InfoUpdateWithoutOwnerInput, Prisma.InfoUncheckedUpdateWithoutOwnerInput>
  create: Prisma.XOR<Prisma.InfoCreateWithoutOwnerInput, Prisma.InfoUncheckedCreateWithoutOwnerInput>
}

export type InfoUpdateWithWhereUniqueWithoutOwnerInput = {
  where: Prisma.InfoWhereUniqueInput
  data: Prisma.XOR<Prisma.InfoUpdateWithoutOwnerInput, Prisma.InfoUncheckedUpdateWithoutOwnerInput>
}

export type InfoUpdateManyWithWhereWithoutOwnerInput = {
  where: Prisma.InfoScalarWhereInput
  data: Prisma.XOR<Prisma.InfoUpdateManyMutationInput, Prisma.InfoUncheckedUpdateManyWithoutOwnerInput>
}

export type InfoScalarWhereInput = {
  AND?: Prisma.InfoScalarWhereInput | Prisma.InfoScalarWhereInput[]
  OR?: Prisma.InfoScalarWhereInput[]
  NOT?: Prisma.InfoScalarWhereInput | Prisma.InfoScalarWhereInput[]
  id?: Prisma.StringFilter<"Info"> | string
  name?: Prisma.StringFilter<"Info"> | string
  userId?: Prisma.StringFilter<"Info"> | string
}

export type InfoCreateWithoutMetadataInput = {
  id?: string
  name: string
  owner: Prisma.OwnerCreateNestedOneWithoutInfoInput
}

export type InfoUncheckedCreateWithoutMetadataInput = {
  id?: string
  name: string
  userId: string
}

export type InfoCreateOrConnectWithoutMetadataInput = {
  where: Prisma.InfoWhereUniqueInput
  create: Prisma.XOR<Prisma.InfoCreateWithoutMetadataInput, Prisma.InfoUncheckedCreateWithoutMetadataInput>
}

export type InfoUpsertWithoutMetadataInput = {
  update: Prisma.XOR<Prisma.InfoUpdateWithoutMetadataInput, Prisma.InfoUncheckedUpdateWithoutMetadataInput>
  create: Prisma.XOR<Prisma.InfoCreateWithoutMetadataInput, Prisma.InfoUncheckedCreateWithoutMetadataInput>
  where?: Prisma.InfoWhereInput
}

export type InfoUpdateToOneWithWhereWithoutMetadataInput = {
  where?: Prisma.InfoWhereInput
  data: Prisma.XOR<Prisma.InfoUpdateWithoutMetadataInput, Prisma.InfoUncheckedUpdateWithoutMetadataInput>
}

export type InfoUpdateWithoutMetadataInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  owner?: Prisma.OwnerUpdateOneRequiredWithoutInfoNestedInput
}

export type InfoUncheckedUpdateWithoutMetadataInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type InfoCreateManyOwnerInput = {
  id?: string
  name: string
}

export type InfoUpdateWithoutOwnerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  metadata?: Prisma.MetadataUpdateManyWithoutInfoNestedInput
}

export type InfoUncheckedUpdateWithoutOwnerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  metadata?: Prisma.MetadataUncheckedUpdateManyWithoutInfoNestedInput
}

export type InfoUncheckedUpdateManyWithoutOwnerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type InfoCountOutputType
 */

export type InfoCountOutputType = {
  metadata: number
}

export type InfoCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  metadata?: boolean | InfoCountOutputTypeCountMetadataArgs
}

/**
 * InfoCountOutputType without action
 */
export type InfoCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InfoCountOutputType
   */
  select?: Prisma.InfoCountOutputTypeSelect<ExtArgs> | null
}

/**
 * InfoCountOutputType without action
 */
export type InfoCountOutputTypeCountMetadataArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MetadataWhereInput
}


export type InfoSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  userId?: boolean
  metadata?: boolean | Prisma.Info$metadataArgs<ExtArgs>
  owner?: boolean | Prisma.OwnerDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.InfoCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["info"]>

export type InfoSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  userId?: boolean
  owner?: boolean | Prisma.OwnerDefaultArgs<ExtArgs>
}, ExtArgs["result"]["info"]>

export type InfoSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  userId?: boolean
  owner?: boolean | Prisma.OwnerDefaultArgs<ExtArgs>
}, ExtArgs["result"]["info"]>

export type InfoSelectScalar = {
  id?: boolean
  name?: boolean
  userId?: boolean
}

export type InfoOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "userId", ExtArgs["result"]["info"]>
export type InfoInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  metadata?: boolean | Prisma.Info$metadataArgs<ExtArgs>
  owner?: boolean | Prisma.OwnerDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.InfoCountOutputTypeDefaultArgs<ExtArgs>
}
export type InfoIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  owner?: boolean | Prisma.OwnerDefaultArgs<ExtArgs>
}
export type InfoIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  owner?: boolean | Prisma.OwnerDefaultArgs<ExtArgs>
}

export type $InfoPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Info"
  objects: {
    metadata: Prisma.$MetadataPayload<ExtArgs>[]
    owner: Prisma.$OwnerPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    userId: string
  }, ExtArgs["result"]["info"]>
  composites: {}
}

export type InfoGetPayload<S extends boolean | null | undefined | InfoDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$InfoPayload, S>

export type InfoCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<InfoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: InfoCountAggregateInputType | true
  }

export interface InfoDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Info'], meta: { name: 'Info' } }
  /**
   * Find zero or one Info that matches the filter.
   * @param {InfoFindUniqueArgs} args - Arguments to find a Info
   * @example
   * // Get one Info
   * const info = await prisma.info.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends InfoFindUniqueArgs>(args: Prisma.SelectSubset<T, InfoFindUniqueArgs<ExtArgs>>): Prisma.Prisma__InfoClient<runtime.Types.Result.GetResult<Prisma.$InfoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Info that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {InfoFindUniqueOrThrowArgs} args - Arguments to find a Info
   * @example
   * // Get one Info
   * const info = await prisma.info.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends InfoFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, InfoFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__InfoClient<runtime.Types.Result.GetResult<Prisma.$InfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Info that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InfoFindFirstArgs} args - Arguments to find a Info
   * @example
   * // Get one Info
   * const info = await prisma.info.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends InfoFindFirstArgs>(args?: Prisma.SelectSubset<T, InfoFindFirstArgs<ExtArgs>>): Prisma.Prisma__InfoClient<runtime.Types.Result.GetResult<Prisma.$InfoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Info that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InfoFindFirstOrThrowArgs} args - Arguments to find a Info
   * @example
   * // Get one Info
   * const info = await prisma.info.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends InfoFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, InfoFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__InfoClient<runtime.Types.Result.GetResult<Prisma.$InfoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Infos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InfoFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Infos
   * const infos = await prisma.info.findMany()
   * 
   * // Get first 10 Infos
   * const infos = await prisma.info.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const infoWithIdOnly = await prisma.info.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends InfoFindManyArgs>(args?: Prisma.SelectSubset<T, InfoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InfoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Info.
   * @param {InfoCreateArgs} args - Arguments to create a Info.
   * @example
   * // Create one Info
   * const Info = await prisma.info.create({
   *   data: {
   *     // ... data to create a Info
   *   }
   * })
   * 
   */
  create<T extends InfoCreateArgs>(args: Prisma.SelectSubset<T, InfoCreateArgs<ExtArgs>>): Prisma.Prisma__InfoClient<runtime.Types.Result.GetResult<Prisma.$InfoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Infos.
   * @param {InfoCreateManyArgs} args - Arguments to create many Infos.
   * @example
   * // Create many Infos
   * const info = await prisma.info.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends InfoCreateManyArgs>(args?: Prisma.SelectSubset<T, InfoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Infos and returns the data saved in the database.
   * @param {InfoCreateManyAndReturnArgs} args - Arguments to create many Infos.
   * @example
   * // Create many Infos
   * const info = await prisma.info.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Infos and only return the `id`
   * const infoWithIdOnly = await prisma.info.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends InfoCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, InfoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InfoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Info.
   * @param {InfoDeleteArgs} args - Arguments to delete one Info.
   * @example
   * // Delete one Info
   * const Info = await prisma.info.delete({
   *   where: {
   *     // ... filter to delete one Info
   *   }
   * })
   * 
   */
  delete<T extends InfoDeleteArgs>(args: Prisma.SelectSubset<T, InfoDeleteArgs<ExtArgs>>): Prisma.Prisma__InfoClient<runtime.Types.Result.GetResult<Prisma.$InfoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Info.
   * @param {InfoUpdateArgs} args - Arguments to update one Info.
   * @example
   * // Update one Info
   * const info = await prisma.info.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends InfoUpdateArgs>(args: Prisma.SelectSubset<T, InfoUpdateArgs<ExtArgs>>): Prisma.Prisma__InfoClient<runtime.Types.Result.GetResult<Prisma.$InfoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Infos.
   * @param {InfoDeleteManyArgs} args - Arguments to filter Infos to delete.
   * @example
   * // Delete a few Infos
   * const { count } = await prisma.info.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends InfoDeleteManyArgs>(args?: Prisma.SelectSubset<T, InfoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Infos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InfoUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Infos
   * const info = await prisma.info.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends InfoUpdateManyArgs>(args: Prisma.SelectSubset<T, InfoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Infos and returns the data updated in the database.
   * @param {InfoUpdateManyAndReturnArgs} args - Arguments to update many Infos.
   * @example
   * // Update many Infos
   * const info = await prisma.info.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Infos and only return the `id`
   * const infoWithIdOnly = await prisma.info.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends InfoUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, InfoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InfoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Info.
   * @param {InfoUpsertArgs} args - Arguments to update or create a Info.
   * @example
   * // Update or create a Info
   * const info = await prisma.info.upsert({
   *   create: {
   *     // ... data to create a Info
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Info we want to update
   *   }
   * })
   */
  upsert<T extends InfoUpsertArgs>(args: Prisma.SelectSubset<T, InfoUpsertArgs<ExtArgs>>): Prisma.Prisma__InfoClient<runtime.Types.Result.GetResult<Prisma.$InfoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Infos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InfoCountArgs} args - Arguments to filter Infos to count.
   * @example
   * // Count the number of Infos
   * const count = await prisma.info.count({
   *   where: {
   *     // ... the filter for the Infos we want to count
   *   }
   * })
  **/
  count<T extends InfoCountArgs>(
    args?: Prisma.Subset<T, InfoCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], InfoCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Info.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends InfoAggregateArgs>(args: Prisma.Subset<T, InfoAggregateArgs>): Prisma.PrismaPromise<GetInfoAggregateType<T>>

  /**
   * Group by Info.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InfoGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends InfoGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: InfoGroupByArgs['orderBy'] }
      : { orderBy?: InfoGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, InfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Info model
 */
readonly fields: InfoFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Info.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__InfoClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  metadata<T extends Prisma.Info$metadataArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Info$metadataArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MetadataPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  owner<T extends Prisma.OwnerDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.OwnerDefaultArgs<ExtArgs>>): Prisma.Prisma__OwnerClient<runtime.Types.Result.GetResult<Prisma.$OwnerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Info model
 */
export interface InfoFieldRefs {
  readonly id: Prisma.FieldRef<"Info", 'String'>
  readonly name: Prisma.FieldRef<"Info", 'String'>
  readonly userId: Prisma.FieldRef<"Info", 'String'>
}
    

// Custom InputTypes
/**
 * Info findUnique
 */
export type InfoFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Info
   */
  select?: Prisma.InfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Info
   */
  omit?: Prisma.InfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InfoInclude<ExtArgs> | null
  /**
   * Filter, which Info to fetch.
   */
  where: Prisma.InfoWhereUniqueInput
}

/**
 * Info findUniqueOrThrow
 */
export type InfoFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Info
   */
  select?: Prisma.InfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Info
   */
  omit?: Prisma.InfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InfoInclude<ExtArgs> | null
  /**
   * Filter, which Info to fetch.
   */
  where: Prisma.InfoWhereUniqueInput
}

/**
 * Info findFirst
 */
export type InfoFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Info
   */
  select?: Prisma.InfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Info
   */
  omit?: Prisma.InfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InfoInclude<ExtArgs> | null
  /**
   * Filter, which Info to fetch.
   */
  where?: Prisma.InfoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Infos to fetch.
   */
  orderBy?: Prisma.InfoOrderByWithRelationInput | Prisma.InfoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Infos.
   */
  cursor?: Prisma.InfoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Infos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Infos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Infos.
   */
  distinct?: Prisma.InfoScalarFieldEnum | Prisma.InfoScalarFieldEnum[]
}

/**
 * Info findFirstOrThrow
 */
export type InfoFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Info
   */
  select?: Prisma.InfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Info
   */
  omit?: Prisma.InfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InfoInclude<ExtArgs> | null
  /**
   * Filter, which Info to fetch.
   */
  where?: Prisma.InfoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Infos to fetch.
   */
  orderBy?: Prisma.InfoOrderByWithRelationInput | Prisma.InfoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Infos.
   */
  cursor?: Prisma.InfoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Infos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Infos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Infos.
   */
  distinct?: Prisma.InfoScalarFieldEnum | Prisma.InfoScalarFieldEnum[]
}

/**
 * Info findMany
 */
export type InfoFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Info
   */
  select?: Prisma.InfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Info
   */
  omit?: Prisma.InfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InfoInclude<ExtArgs> | null
  /**
   * Filter, which Infos to fetch.
   */
  where?: Prisma.InfoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Infos to fetch.
   */
  orderBy?: Prisma.InfoOrderByWithRelationInput | Prisma.InfoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Infos.
   */
  cursor?: Prisma.InfoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Infos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Infos.
   */
  skip?: number
  distinct?: Prisma.InfoScalarFieldEnum | Prisma.InfoScalarFieldEnum[]
}

/**
 * Info create
 */
export type InfoCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Info
   */
  select?: Prisma.InfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Info
   */
  omit?: Prisma.InfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InfoInclude<ExtArgs> | null
  /**
   * The data needed to create a Info.
   */
  data: Prisma.XOR<Prisma.InfoCreateInput, Prisma.InfoUncheckedCreateInput>
}

/**
 * Info createMany
 */
export type InfoCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Infos.
   */
  data: Prisma.InfoCreateManyInput | Prisma.InfoCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Info createManyAndReturn
 */
export type InfoCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Info
   */
  select?: Prisma.InfoSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Info
   */
  omit?: Prisma.InfoOmit<ExtArgs> | null
  /**
   * The data used to create many Infos.
   */
  data: Prisma.InfoCreateManyInput | Prisma.InfoCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InfoIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Info update
 */
export type InfoUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Info
   */
  select?: Prisma.InfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Info
   */
  omit?: Prisma.InfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InfoInclude<ExtArgs> | null
  /**
   * The data needed to update a Info.
   */
  data: Prisma.XOR<Prisma.InfoUpdateInput, Prisma.InfoUncheckedUpdateInput>
  /**
   * Choose, which Info to update.
   */
  where: Prisma.InfoWhereUniqueInput
}

/**
 * Info updateMany
 */
export type InfoUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Infos.
   */
  data: Prisma.XOR<Prisma.InfoUpdateManyMutationInput, Prisma.InfoUncheckedUpdateManyInput>
  /**
   * Filter which Infos to update
   */
  where?: Prisma.InfoWhereInput
  /**
   * Limit how many Infos to update.
   */
  limit?: number
}

/**
 * Info updateManyAndReturn
 */
export type InfoUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Info
   */
  select?: Prisma.InfoSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Info
   */
  omit?: Prisma.InfoOmit<ExtArgs> | null
  /**
   * The data used to update Infos.
   */
  data: Prisma.XOR<Prisma.InfoUpdateManyMutationInput, Prisma.InfoUncheckedUpdateManyInput>
  /**
   * Filter which Infos to update
   */
  where?: Prisma.InfoWhereInput
  /**
   * Limit how many Infos to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InfoIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Info upsert
 */
export type InfoUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Info
   */
  select?: Prisma.InfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Info
   */
  omit?: Prisma.InfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InfoInclude<ExtArgs> | null
  /**
   * The filter to search for the Info to update in case it exists.
   */
  where: Prisma.InfoWhereUniqueInput
  /**
   * In case the Info found by the `where` argument doesn't exist, create a new Info with this data.
   */
  create: Prisma.XOR<Prisma.InfoCreateInput, Prisma.InfoUncheckedCreateInput>
  /**
   * In case the Info was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.InfoUpdateInput, Prisma.InfoUncheckedUpdateInput>
}

/**
 * Info delete
 */
export type InfoDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Info
   */
  select?: Prisma.InfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Info
   */
  omit?: Prisma.InfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InfoInclude<ExtArgs> | null
  /**
   * Filter which Info to delete.
   */
  where: Prisma.InfoWhereUniqueInput
}

/**
 * Info deleteMany
 */
export type InfoDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Infos to delete
   */
  where?: Prisma.InfoWhereInput
  /**
   * Limit how many Infos to delete.
   */
  limit?: number
}

/**
 * Info.metadata
 */
export type Info$metadataArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Metadata
   */
  select?: Prisma.MetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Metadata
   */
  omit?: Prisma.MetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetadataInclude<ExtArgs> | null
  where?: Prisma.MetadataWhereInput
  orderBy?: Prisma.MetadataOrderByWithRelationInput | Prisma.MetadataOrderByWithRelationInput[]
  cursor?: Prisma.MetadataWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.MetadataScalarFieldEnum | Prisma.MetadataScalarFieldEnum[]
}

/**
 * Info without action
 */
export type InfoDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Info
   */
  select?: Prisma.InfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Info
   */
  omit?: Prisma.InfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InfoInclude<ExtArgs> | null
}
