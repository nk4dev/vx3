
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Owner` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Owner
 * 
 */
export type OwnerModel = runtime.Types.Result.DefaultSelection<Prisma.$OwnerPayload>

export type AggregateOwner = {
  _count: OwnerCountAggregateOutputType | null
  _min: OwnerMinAggregateOutputType | null
  _max: OwnerMaxAggregateOutputType | null
}

export type OwnerMinAggregateOutputType = {
  id: string | null
  name: string | null
  email: string | null
}

export type OwnerMaxAggregateOutputType = {
  id: string | null
  name: string | null
  email: string | null
}

export type OwnerCountAggregateOutputType = {
  id: number
  name: number
  email: number
  _all: number
}


export type OwnerMinAggregateInputType = {
  id?: true
  name?: true
  email?: true
}

export type OwnerMaxAggregateInputType = {
  id?: true
  name?: true
  email?: true
}

export type OwnerCountAggregateInputType = {
  id?: true
  name?: true
  email?: true
  _all?: true
}

export type OwnerAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Owner to aggregate.
   */
  where?: Prisma.OwnerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Owners to fetch.
   */
  orderBy?: Prisma.OwnerOrderByWithRelationInput | Prisma.OwnerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.OwnerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Owners from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Owners.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Owners
  **/
  _count?: true | OwnerCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: OwnerMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: OwnerMaxAggregateInputType
}

export type GetOwnerAggregateType<T extends OwnerAggregateArgs> = {
      [P in keyof T & keyof AggregateOwner]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateOwner[P]>
    : Prisma.GetScalarType<T[P], AggregateOwner[P]>
}




export type OwnerGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.OwnerWhereInput
  orderBy?: Prisma.OwnerOrderByWithAggregationInput | Prisma.OwnerOrderByWithAggregationInput[]
  by: Prisma.OwnerScalarFieldEnum[] | Prisma.OwnerScalarFieldEnum
  having?: Prisma.OwnerScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: OwnerCountAggregateInputType | true
  _min?: OwnerMinAggregateInputType
  _max?: OwnerMaxAggregateInputType
}

export type OwnerGroupByOutputType = {
  id: string
  name: string
  email: string
  _count: OwnerCountAggregateOutputType | null
  _min: OwnerMinAggregateOutputType | null
  _max: OwnerMaxAggregateOutputType | null
}

type GetOwnerGroupByPayload<T extends OwnerGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<OwnerGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof OwnerGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], OwnerGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], OwnerGroupByOutputType[P]>
      }
    >
  >



export type OwnerWhereInput = {
  AND?: Prisma.OwnerWhereInput | Prisma.OwnerWhereInput[]
  OR?: Prisma.OwnerWhereInput[]
  NOT?: Prisma.OwnerWhereInput | Prisma.OwnerWhereInput[]
  id?: Prisma.StringFilter<"Owner"> | string
  name?: Prisma.StringFilter<"Owner"> | string
  email?: Prisma.StringFilter<"Owner"> | string
  info?: Prisma.InfoListRelationFilter
}

export type OwnerOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  info?: Prisma.InfoOrderByRelationAggregateInput
}

export type OwnerWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  email?: string
  AND?: Prisma.OwnerWhereInput | Prisma.OwnerWhereInput[]
  OR?: Prisma.OwnerWhereInput[]
  NOT?: Prisma.OwnerWhereInput | Prisma.OwnerWhereInput[]
  name?: Prisma.StringFilter<"Owner"> | string
  info?: Prisma.InfoListRelationFilter
}, "id" | "email">

export type OwnerOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  _count?: Prisma.OwnerCountOrderByAggregateInput
  _max?: Prisma.OwnerMaxOrderByAggregateInput
  _min?: Prisma.OwnerMinOrderByAggregateInput
}

export type OwnerScalarWhereWithAggregatesInput = {
  AND?: Prisma.OwnerScalarWhereWithAggregatesInput | Prisma.OwnerScalarWhereWithAggregatesInput[]
  OR?: Prisma.OwnerScalarWhereWithAggregatesInput[]
  NOT?: Prisma.OwnerScalarWhereWithAggregatesInput | Prisma.OwnerScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Owner"> | string
  name?: Prisma.StringWithAggregatesFilter<"Owner"> | string
  email?: Prisma.StringWithAggregatesFilter<"Owner"> | string
}

export type OwnerCreateInput = {
  id?: string
  name: string
  email: string
  info?: Prisma.InfoCreateNestedManyWithoutOwnerInput
}

export type OwnerUncheckedCreateInput = {
  id?: string
  name: string
  email: string
  info?: Prisma.InfoUncheckedCreateNestedManyWithoutOwnerInput
}

export type OwnerUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  info?: Prisma.InfoUpdateManyWithoutOwnerNestedInput
}

export type OwnerUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  info?: Prisma.InfoUncheckedUpdateManyWithoutOwnerNestedInput
}

export type OwnerCreateManyInput = {
  id?: string
  name: string
  email: string
}

export type OwnerUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
}

export type OwnerUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
}

export type OwnerScalarRelationFilter = {
  is?: Prisma.OwnerWhereInput
  isNot?: Prisma.OwnerWhereInput
}

export type OwnerCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
}

export type OwnerMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
}

export type OwnerMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
}

export type OwnerCreateNestedOneWithoutInfoInput = {
  create?: Prisma.XOR<Prisma.OwnerCreateWithoutInfoInput, Prisma.OwnerUncheckedCreateWithoutInfoInput>
  connectOrCreate?: Prisma.OwnerCreateOrConnectWithoutInfoInput
  connect?: Prisma.OwnerWhereUniqueInput
}

export type OwnerUpdateOneRequiredWithoutInfoNestedInput = {
  create?: Prisma.XOR<Prisma.OwnerCreateWithoutInfoInput, Prisma.OwnerUncheckedCreateWithoutInfoInput>
  connectOrCreate?: Prisma.OwnerCreateOrConnectWithoutInfoInput
  upsert?: Prisma.OwnerUpsertWithoutInfoInput
  connect?: Prisma.OwnerWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.OwnerUpdateToOneWithWhereWithoutInfoInput, Prisma.OwnerUpdateWithoutInfoInput>, Prisma.OwnerUncheckedUpdateWithoutInfoInput>
}

export type OwnerCreateWithoutInfoInput = {
  id?: string
  name: string
  email: string
}

export type OwnerUncheckedCreateWithoutInfoInput = {
  id?: string
  name: string
  email: string
}

export type OwnerCreateOrConnectWithoutInfoInput = {
  where: Prisma.OwnerWhereUniqueInput
  create: Prisma.XOR<Prisma.OwnerCreateWithoutInfoInput, Prisma.OwnerUncheckedCreateWithoutInfoInput>
}

export type OwnerUpsertWithoutInfoInput = {
  update: Prisma.XOR<Prisma.OwnerUpdateWithoutInfoInput, Prisma.OwnerUncheckedUpdateWithoutInfoInput>
  create: Prisma.XOR<Prisma.OwnerCreateWithoutInfoInput, Prisma.OwnerUncheckedCreateWithoutInfoInput>
  where?: Prisma.OwnerWhereInput
}

export type OwnerUpdateToOneWithWhereWithoutInfoInput = {
  where?: Prisma.OwnerWhereInput
  data: Prisma.XOR<Prisma.OwnerUpdateWithoutInfoInput, Prisma.OwnerUncheckedUpdateWithoutInfoInput>
}

export type OwnerUpdateWithoutInfoInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
}

export type OwnerUncheckedUpdateWithoutInfoInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type OwnerCountOutputType
 */

export type OwnerCountOutputType = {
  info: number
}

export type OwnerCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  info?: boolean | OwnerCountOutputTypeCountInfoArgs
}

/**
 * OwnerCountOutputType without action
 */
export type OwnerCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OwnerCountOutputType
   */
  select?: Prisma.OwnerCountOutputTypeSelect<ExtArgs> | null
}

/**
 * OwnerCountOutputType without action
 */
export type OwnerCountOutputTypeCountInfoArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.InfoWhereInput
}


export type OwnerSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  email?: boolean
  info?: boolean | Prisma.Owner$infoArgs<ExtArgs>
  _count?: boolean | Prisma.OwnerCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["owner"]>

export type OwnerSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  email?: boolean
}, ExtArgs["result"]["owner"]>

export type OwnerSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  email?: boolean
}, ExtArgs["result"]["owner"]>

export type OwnerSelectScalar = {
  id?: boolean
  name?: boolean
  email?: boolean
}

export type OwnerOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "email", ExtArgs["result"]["owner"]>
export type OwnerInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  info?: boolean | Prisma.Owner$infoArgs<ExtArgs>
  _count?: boolean | Prisma.OwnerCountOutputTypeDefaultArgs<ExtArgs>
}
export type OwnerIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type OwnerIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $OwnerPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Owner"
  objects: {
    info: Prisma.$InfoPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    email: string
  }, ExtArgs["result"]["owner"]>
  composites: {}
}

export type OwnerGetPayload<S extends boolean | null | undefined | OwnerDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$OwnerPayload, S>

export type OwnerCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<OwnerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: OwnerCountAggregateInputType | true
  }

export interface OwnerDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Owner'], meta: { name: 'Owner' } }
  /**
   * Find zero or one Owner that matches the filter.
   * @param {OwnerFindUniqueArgs} args - Arguments to find a Owner
   * @example
   * // Get one Owner
   * const owner = await prisma.owner.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends OwnerFindUniqueArgs>(args: Prisma.SelectSubset<T, OwnerFindUniqueArgs<ExtArgs>>): Prisma.Prisma__OwnerClient<runtime.Types.Result.GetResult<Prisma.$OwnerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Owner that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {OwnerFindUniqueOrThrowArgs} args - Arguments to find a Owner
   * @example
   * // Get one Owner
   * const owner = await prisma.owner.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends OwnerFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, OwnerFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__OwnerClient<runtime.Types.Result.GetResult<Prisma.$OwnerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Owner that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OwnerFindFirstArgs} args - Arguments to find a Owner
   * @example
   * // Get one Owner
   * const owner = await prisma.owner.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends OwnerFindFirstArgs>(args?: Prisma.SelectSubset<T, OwnerFindFirstArgs<ExtArgs>>): Prisma.Prisma__OwnerClient<runtime.Types.Result.GetResult<Prisma.$OwnerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Owner that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OwnerFindFirstOrThrowArgs} args - Arguments to find a Owner
   * @example
   * // Get one Owner
   * const owner = await prisma.owner.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends OwnerFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, OwnerFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__OwnerClient<runtime.Types.Result.GetResult<Prisma.$OwnerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Owners that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OwnerFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Owners
   * const owners = await prisma.owner.findMany()
   * 
   * // Get first 10 Owners
   * const owners = await prisma.owner.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const ownerWithIdOnly = await prisma.owner.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends OwnerFindManyArgs>(args?: Prisma.SelectSubset<T, OwnerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OwnerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Owner.
   * @param {OwnerCreateArgs} args - Arguments to create a Owner.
   * @example
   * // Create one Owner
   * const Owner = await prisma.owner.create({
   *   data: {
   *     // ... data to create a Owner
   *   }
   * })
   * 
   */
  create<T extends OwnerCreateArgs>(args: Prisma.SelectSubset<T, OwnerCreateArgs<ExtArgs>>): Prisma.Prisma__OwnerClient<runtime.Types.Result.GetResult<Prisma.$OwnerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Owners.
   * @param {OwnerCreateManyArgs} args - Arguments to create many Owners.
   * @example
   * // Create many Owners
   * const owner = await prisma.owner.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends OwnerCreateManyArgs>(args?: Prisma.SelectSubset<T, OwnerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Owners and returns the data saved in the database.
   * @param {OwnerCreateManyAndReturnArgs} args - Arguments to create many Owners.
   * @example
   * // Create many Owners
   * const owner = await prisma.owner.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Owners and only return the `id`
   * const ownerWithIdOnly = await prisma.owner.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends OwnerCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, OwnerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OwnerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Owner.
   * @param {OwnerDeleteArgs} args - Arguments to delete one Owner.
   * @example
   * // Delete one Owner
   * const Owner = await prisma.owner.delete({
   *   where: {
   *     // ... filter to delete one Owner
   *   }
   * })
   * 
   */
  delete<T extends OwnerDeleteArgs>(args: Prisma.SelectSubset<T, OwnerDeleteArgs<ExtArgs>>): Prisma.Prisma__OwnerClient<runtime.Types.Result.GetResult<Prisma.$OwnerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Owner.
   * @param {OwnerUpdateArgs} args - Arguments to update one Owner.
   * @example
   * // Update one Owner
   * const owner = await prisma.owner.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends OwnerUpdateArgs>(args: Prisma.SelectSubset<T, OwnerUpdateArgs<ExtArgs>>): Prisma.Prisma__OwnerClient<runtime.Types.Result.GetResult<Prisma.$OwnerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Owners.
   * @param {OwnerDeleteManyArgs} args - Arguments to filter Owners to delete.
   * @example
   * // Delete a few Owners
   * const { count } = await prisma.owner.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends OwnerDeleteManyArgs>(args?: Prisma.SelectSubset<T, OwnerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Owners.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OwnerUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Owners
   * const owner = await prisma.owner.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends OwnerUpdateManyArgs>(args: Prisma.SelectSubset<T, OwnerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Owners and returns the data updated in the database.
   * @param {OwnerUpdateManyAndReturnArgs} args - Arguments to update many Owners.
   * @example
   * // Update many Owners
   * const owner = await prisma.owner.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Owners and only return the `id`
   * const ownerWithIdOnly = await prisma.owner.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends OwnerUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, OwnerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OwnerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Owner.
   * @param {OwnerUpsertArgs} args - Arguments to update or create a Owner.
   * @example
   * // Update or create a Owner
   * const owner = await prisma.owner.upsert({
   *   create: {
   *     // ... data to create a Owner
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Owner we want to update
   *   }
   * })
   */
  upsert<T extends OwnerUpsertArgs>(args: Prisma.SelectSubset<T, OwnerUpsertArgs<ExtArgs>>): Prisma.Prisma__OwnerClient<runtime.Types.Result.GetResult<Prisma.$OwnerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Owners.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OwnerCountArgs} args - Arguments to filter Owners to count.
   * @example
   * // Count the number of Owners
   * const count = await prisma.owner.count({
   *   where: {
   *     // ... the filter for the Owners we want to count
   *   }
   * })
  **/
  count<T extends OwnerCountArgs>(
    args?: Prisma.Subset<T, OwnerCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], OwnerCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Owner.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OwnerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends OwnerAggregateArgs>(args: Prisma.Subset<T, OwnerAggregateArgs>): Prisma.PrismaPromise<GetOwnerAggregateType<T>>

  /**
   * Group by Owner.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OwnerGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends OwnerGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: OwnerGroupByArgs['orderBy'] }
      : { orderBy?: OwnerGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, OwnerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOwnerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Owner model
 */
readonly fields: OwnerFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Owner.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__OwnerClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  info<T extends Prisma.Owner$infoArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Owner$infoArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InfoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Owner model
 */
export interface OwnerFieldRefs {
  readonly id: Prisma.FieldRef<"Owner", 'String'>
  readonly name: Prisma.FieldRef<"Owner", 'String'>
  readonly email: Prisma.FieldRef<"Owner", 'String'>
}
    

// Custom InputTypes
/**
 * Owner findUnique
 */
export type OwnerFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Owner
   */
  select?: Prisma.OwnerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Owner
   */
  omit?: Prisma.OwnerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OwnerInclude<ExtArgs> | null
  /**
   * Filter, which Owner to fetch.
   */
  where: Prisma.OwnerWhereUniqueInput
}

/**
 * Owner findUniqueOrThrow
 */
export type OwnerFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Owner
   */
  select?: Prisma.OwnerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Owner
   */
  omit?: Prisma.OwnerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OwnerInclude<ExtArgs> | null
  /**
   * Filter, which Owner to fetch.
   */
  where: Prisma.OwnerWhereUniqueInput
}

/**
 * Owner findFirst
 */
export type OwnerFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Owner
   */
  select?: Prisma.OwnerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Owner
   */
  omit?: Prisma.OwnerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OwnerInclude<ExtArgs> | null
  /**
   * Filter, which Owner to fetch.
   */
  where?: Prisma.OwnerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Owners to fetch.
   */
  orderBy?: Prisma.OwnerOrderByWithRelationInput | Prisma.OwnerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Owners.
   */
  cursor?: Prisma.OwnerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Owners from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Owners.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Owners.
   */
  distinct?: Prisma.OwnerScalarFieldEnum | Prisma.OwnerScalarFieldEnum[]
}

/**
 * Owner findFirstOrThrow
 */
export type OwnerFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Owner
   */
  select?: Prisma.OwnerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Owner
   */
  omit?: Prisma.OwnerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OwnerInclude<ExtArgs> | null
  /**
   * Filter, which Owner to fetch.
   */
  where?: Prisma.OwnerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Owners to fetch.
   */
  orderBy?: Prisma.OwnerOrderByWithRelationInput | Prisma.OwnerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Owners.
   */
  cursor?: Prisma.OwnerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Owners from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Owners.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Owners.
   */
  distinct?: Prisma.OwnerScalarFieldEnum | Prisma.OwnerScalarFieldEnum[]
}

/**
 * Owner findMany
 */
export type OwnerFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Owner
   */
  select?: Prisma.OwnerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Owner
   */
  omit?: Prisma.OwnerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OwnerInclude<ExtArgs> | null
  /**
   * Filter, which Owners to fetch.
   */
  where?: Prisma.OwnerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Owners to fetch.
   */
  orderBy?: Prisma.OwnerOrderByWithRelationInput | Prisma.OwnerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Owners.
   */
  cursor?: Prisma.OwnerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Owners from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Owners.
   */
  skip?: number
  distinct?: Prisma.OwnerScalarFieldEnum | Prisma.OwnerScalarFieldEnum[]
}

/**
 * Owner create
 */
export type OwnerCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Owner
   */
  select?: Prisma.OwnerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Owner
   */
  omit?: Prisma.OwnerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OwnerInclude<ExtArgs> | null
  /**
   * The data needed to create a Owner.
   */
  data: Prisma.XOR<Prisma.OwnerCreateInput, Prisma.OwnerUncheckedCreateInput>
}

/**
 * Owner createMany
 */
export type OwnerCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Owners.
   */
  data: Prisma.OwnerCreateManyInput | Prisma.OwnerCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Owner createManyAndReturn
 */
export type OwnerCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Owner
   */
  select?: Prisma.OwnerSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Owner
   */
  omit?: Prisma.OwnerOmit<ExtArgs> | null
  /**
   * The data used to create many Owners.
   */
  data: Prisma.OwnerCreateManyInput | Prisma.OwnerCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Owner update
 */
export type OwnerUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Owner
   */
  select?: Prisma.OwnerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Owner
   */
  omit?: Prisma.OwnerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OwnerInclude<ExtArgs> | null
  /**
   * The data needed to update a Owner.
   */
  data: Prisma.XOR<Prisma.OwnerUpdateInput, Prisma.OwnerUncheckedUpdateInput>
  /**
   * Choose, which Owner to update.
   */
  where: Prisma.OwnerWhereUniqueInput
}

/**
 * Owner updateMany
 */
export type OwnerUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Owners.
   */
  data: Prisma.XOR<Prisma.OwnerUpdateManyMutationInput, Prisma.OwnerUncheckedUpdateManyInput>
  /**
   * Filter which Owners to update
   */
  where?: Prisma.OwnerWhereInput
  /**
   * Limit how many Owners to update.
   */
  limit?: number
}

/**
 * Owner updateManyAndReturn
 */
export type OwnerUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Owner
   */
  select?: Prisma.OwnerSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Owner
   */
  omit?: Prisma.OwnerOmit<ExtArgs> | null
  /**
   * The data used to update Owners.
   */
  data: Prisma.XOR<Prisma.OwnerUpdateManyMutationInput, Prisma.OwnerUncheckedUpdateManyInput>
  /**
   * Filter which Owners to update
   */
  where?: Prisma.OwnerWhereInput
  /**
   * Limit how many Owners to update.
   */
  limit?: number
}

/**
 * Owner upsert
 */
export type OwnerUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Owner
   */
  select?: Prisma.OwnerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Owner
   */
  omit?: Prisma.OwnerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OwnerInclude<ExtArgs> | null
  /**
   * The filter to search for the Owner to update in case it exists.
   */
  where: Prisma.OwnerWhereUniqueInput
  /**
   * In case the Owner found by the `where` argument doesn't exist, create a new Owner with this data.
   */
  create: Prisma.XOR<Prisma.OwnerCreateInput, Prisma.OwnerUncheckedCreateInput>
  /**
   * In case the Owner was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.OwnerUpdateInput, Prisma.OwnerUncheckedUpdateInput>
}

/**
 * Owner delete
 */
export type OwnerDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Owner
   */
  select?: Prisma.OwnerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Owner
   */
  omit?: Prisma.OwnerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OwnerInclude<ExtArgs> | null
  /**
   * Filter which Owner to delete.
   */
  where: Prisma.OwnerWhereUniqueInput
}

/**
 * Owner deleteMany
 */
export type OwnerDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Owners to delete
   */
  where?: Prisma.OwnerWhereInput
  /**
   * Limit how many Owners to delete.
   */
  limit?: number
}

/**
 * Owner.info
 */
export type Owner$infoArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Info
   */
  select?: Prisma.InfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Info
   */
  omit?: Prisma.InfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InfoInclude<ExtArgs> | null
  where?: Prisma.InfoWhereInput
  orderBy?: Prisma.InfoOrderByWithRelationInput | Prisma.InfoOrderByWithRelationInput[]
  cursor?: Prisma.InfoWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.InfoScalarFieldEnum | Prisma.InfoScalarFieldEnum[]
}

/**
 * Owner without action
 */
export type OwnerDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Owner
   */
  select?: Prisma.OwnerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Owner
   */
  omit?: Prisma.OwnerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OwnerInclude<ExtArgs> | null
}
