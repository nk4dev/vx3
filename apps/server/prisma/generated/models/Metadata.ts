
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Metadata` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Metadata
 * 
 */
export type MetadataModel = runtime.Types.Result.DefaultSelection<Prisma.$MetadataPayload>

export type AggregateMetadata = {
  _count: MetadataCountAggregateOutputType | null
  _min: MetadataMinAggregateOutputType | null
  _max: MetadataMaxAggregateOutputType | null
}

export type MetadataMinAggregateOutputType = {
  id: string | null
  infoId: string | null
  icon: string | null
  description: string | null
}

export type MetadataMaxAggregateOutputType = {
  id: string | null
  infoId: string | null
  icon: string | null
  description: string | null
}

export type MetadataCountAggregateOutputType = {
  id: number
  infoId: number
  icon: number
  description: number
  _all: number
}


export type MetadataMinAggregateInputType = {
  id?: true
  infoId?: true
  icon?: true
  description?: true
}

export type MetadataMaxAggregateInputType = {
  id?: true
  infoId?: true
  icon?: true
  description?: true
}

export type MetadataCountAggregateInputType = {
  id?: true
  infoId?: true
  icon?: true
  description?: true
  _all?: true
}

export type MetadataAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Metadata to aggregate.
   */
  where?: Prisma.MetadataWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Metadata to fetch.
   */
  orderBy?: Prisma.MetadataOrderByWithRelationInput | Prisma.MetadataOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MetadataWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Metadata from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Metadata.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Metadata
  **/
  _count?: true | MetadataCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MetadataMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MetadataMaxAggregateInputType
}

export type GetMetadataAggregateType<T extends MetadataAggregateArgs> = {
      [P in keyof T & keyof AggregateMetadata]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMetadata[P]>
    : Prisma.GetScalarType<T[P], AggregateMetadata[P]>
}




export type MetadataGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MetadataWhereInput
  orderBy?: Prisma.MetadataOrderByWithAggregationInput | Prisma.MetadataOrderByWithAggregationInput[]
  by: Prisma.MetadataScalarFieldEnum[] | Prisma.MetadataScalarFieldEnum
  having?: Prisma.MetadataScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MetadataCountAggregateInputType | true
  _min?: MetadataMinAggregateInputType
  _max?: MetadataMaxAggregateInputType
}

export type MetadataGroupByOutputType = {
  id: string
  infoId: string
  icon: string
  description: string
  _count: MetadataCountAggregateOutputType | null
  _min: MetadataMinAggregateOutputType | null
  _max: MetadataMaxAggregateOutputType | null
}

type GetMetadataGroupByPayload<T extends MetadataGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MetadataGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MetadataGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MetadataGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MetadataGroupByOutputType[P]>
      }
    >
  >



export type MetadataWhereInput = {
  AND?: Prisma.MetadataWhereInput | Prisma.MetadataWhereInput[]
  OR?: Prisma.MetadataWhereInput[]
  NOT?: Prisma.MetadataWhereInput | Prisma.MetadataWhereInput[]
  id?: Prisma.StringFilter<"Metadata"> | string
  infoId?: Prisma.StringFilter<"Metadata"> | string
  icon?: Prisma.StringFilter<"Metadata"> | string
  description?: Prisma.StringFilter<"Metadata"> | string
  info?: Prisma.XOR<Prisma.InfoScalarRelationFilter, Prisma.InfoWhereInput>
}

export type MetadataOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  infoId?: Prisma.SortOrder
  icon?: Prisma.SortOrder
  description?: Prisma.SortOrder
  info?: Prisma.InfoOrderByWithRelationInput
}

export type MetadataWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.MetadataWhereInput | Prisma.MetadataWhereInput[]
  OR?: Prisma.MetadataWhereInput[]
  NOT?: Prisma.MetadataWhereInput | Prisma.MetadataWhereInput[]
  infoId?: Prisma.StringFilter<"Metadata"> | string
  icon?: Prisma.StringFilter<"Metadata"> | string
  description?: Prisma.StringFilter<"Metadata"> | string
  info?: Prisma.XOR<Prisma.InfoScalarRelationFilter, Prisma.InfoWhereInput>
}, "id">

export type MetadataOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  infoId?: Prisma.SortOrder
  icon?: Prisma.SortOrder
  description?: Prisma.SortOrder
  _count?: Prisma.MetadataCountOrderByAggregateInput
  _max?: Prisma.MetadataMaxOrderByAggregateInput
  _min?: Prisma.MetadataMinOrderByAggregateInput
}

export type MetadataScalarWhereWithAggregatesInput = {
  AND?: Prisma.MetadataScalarWhereWithAggregatesInput | Prisma.MetadataScalarWhereWithAggregatesInput[]
  OR?: Prisma.MetadataScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MetadataScalarWhereWithAggregatesInput | Prisma.MetadataScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Metadata"> | string
  infoId?: Prisma.StringWithAggregatesFilter<"Metadata"> | string
  icon?: Prisma.StringWithAggregatesFilter<"Metadata"> | string
  description?: Prisma.StringWithAggregatesFilter<"Metadata"> | string
}

export type MetadataCreateInput = {
  id?: string
  icon: string
  description: string
  info: Prisma.InfoCreateNestedOneWithoutMetadataInput
}

export type MetadataUncheckedCreateInput = {
  id?: string
  infoId: string
  icon: string
  description: string
}

export type MetadataUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  icon?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  info?: Prisma.InfoUpdateOneRequiredWithoutMetadataNestedInput
}

export type MetadataUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  infoId?: Prisma.StringFieldUpdateOperationsInput | string
  icon?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
}

export type MetadataCreateManyInput = {
  id?: string
  infoId: string
  icon: string
  description: string
}

export type MetadataUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  icon?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
}

export type MetadataUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  infoId?: Prisma.StringFieldUpdateOperationsInput | string
  icon?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
}

export type MetadataListRelationFilter = {
  every?: Prisma.MetadataWhereInput
  some?: Prisma.MetadataWhereInput
  none?: Prisma.MetadataWhereInput
}

export type MetadataOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MetadataCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  infoId?: Prisma.SortOrder
  icon?: Prisma.SortOrder
  description?: Prisma.SortOrder
}

export type MetadataMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  infoId?: Prisma.SortOrder
  icon?: Prisma.SortOrder
  description?: Prisma.SortOrder
}

export type MetadataMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  infoId?: Prisma.SortOrder
  icon?: Prisma.SortOrder
  description?: Prisma.SortOrder
}

export type MetadataCreateNestedManyWithoutInfoInput = {
  create?: Prisma.XOR<Prisma.MetadataCreateWithoutInfoInput, Prisma.MetadataUncheckedCreateWithoutInfoInput> | Prisma.MetadataCreateWithoutInfoInput[] | Prisma.MetadataUncheckedCreateWithoutInfoInput[]
  connectOrCreate?: Prisma.MetadataCreateOrConnectWithoutInfoInput | Prisma.MetadataCreateOrConnectWithoutInfoInput[]
  createMany?: Prisma.MetadataCreateManyInfoInputEnvelope
  connect?: Prisma.MetadataWhereUniqueInput | Prisma.MetadataWhereUniqueInput[]
}

export type MetadataUncheckedCreateNestedManyWithoutInfoInput = {
  create?: Prisma.XOR<Prisma.MetadataCreateWithoutInfoInput, Prisma.MetadataUncheckedCreateWithoutInfoInput> | Prisma.MetadataCreateWithoutInfoInput[] | Prisma.MetadataUncheckedCreateWithoutInfoInput[]
  connectOrCreate?: Prisma.MetadataCreateOrConnectWithoutInfoInput | Prisma.MetadataCreateOrConnectWithoutInfoInput[]
  createMany?: Prisma.MetadataCreateManyInfoInputEnvelope
  connect?: Prisma.MetadataWhereUniqueInput | Prisma.MetadataWhereUniqueInput[]
}

export type MetadataUpdateManyWithoutInfoNestedInput = {
  create?: Prisma.XOR<Prisma.MetadataCreateWithoutInfoInput, Prisma.MetadataUncheckedCreateWithoutInfoInput> | Prisma.MetadataCreateWithoutInfoInput[] | Prisma.MetadataUncheckedCreateWithoutInfoInput[]
  connectOrCreate?: Prisma.MetadataCreateOrConnectWithoutInfoInput | Prisma.MetadataCreateOrConnectWithoutInfoInput[]
  upsert?: Prisma.MetadataUpsertWithWhereUniqueWithoutInfoInput | Prisma.MetadataUpsertWithWhereUniqueWithoutInfoInput[]
  createMany?: Prisma.MetadataCreateManyInfoInputEnvelope
  set?: Prisma.MetadataWhereUniqueInput | Prisma.MetadataWhereUniqueInput[]
  disconnect?: Prisma.MetadataWhereUniqueInput | Prisma.MetadataWhereUniqueInput[]
  delete?: Prisma.MetadataWhereUniqueInput | Prisma.MetadataWhereUniqueInput[]
  connect?: Prisma.MetadataWhereUniqueInput | Prisma.MetadataWhereUniqueInput[]
  update?: Prisma.MetadataUpdateWithWhereUniqueWithoutInfoInput | Prisma.MetadataUpdateWithWhereUniqueWithoutInfoInput[]
  updateMany?: Prisma.MetadataUpdateManyWithWhereWithoutInfoInput | Prisma.MetadataUpdateManyWithWhereWithoutInfoInput[]
  deleteMany?: Prisma.MetadataScalarWhereInput | Prisma.MetadataScalarWhereInput[]
}

export type MetadataUncheckedUpdateManyWithoutInfoNestedInput = {
  create?: Prisma.XOR<Prisma.MetadataCreateWithoutInfoInput, Prisma.MetadataUncheckedCreateWithoutInfoInput> | Prisma.MetadataCreateWithoutInfoInput[] | Prisma.MetadataUncheckedCreateWithoutInfoInput[]
  connectOrCreate?: Prisma.MetadataCreateOrConnectWithoutInfoInput | Prisma.MetadataCreateOrConnectWithoutInfoInput[]
  upsert?: Prisma.MetadataUpsertWithWhereUniqueWithoutInfoInput | Prisma.MetadataUpsertWithWhereUniqueWithoutInfoInput[]
  createMany?: Prisma.MetadataCreateManyInfoInputEnvelope
  set?: Prisma.MetadataWhereUniqueInput | Prisma.MetadataWhereUniqueInput[]
  disconnect?: Prisma.MetadataWhereUniqueInput | Prisma.MetadataWhereUniqueInput[]
  delete?: Prisma.MetadataWhereUniqueInput | Prisma.MetadataWhereUniqueInput[]
  connect?: Prisma.MetadataWhereUniqueInput | Prisma.MetadataWhereUniqueInput[]
  update?: Prisma.MetadataUpdateWithWhereUniqueWithoutInfoInput | Prisma.MetadataUpdateWithWhereUniqueWithoutInfoInput[]
  updateMany?: Prisma.MetadataUpdateManyWithWhereWithoutInfoInput | Prisma.MetadataUpdateManyWithWhereWithoutInfoInput[]
  deleteMany?: Prisma.MetadataScalarWhereInput | Prisma.MetadataScalarWhereInput[]
}

export type MetadataCreateWithoutInfoInput = {
  id?: string
  icon: string
  description: string
}

export type MetadataUncheckedCreateWithoutInfoInput = {
  id?: string
  icon: string
  description: string
}

export type MetadataCreateOrConnectWithoutInfoInput = {
  where: Prisma.MetadataWhereUniqueInput
  create: Prisma.XOR<Prisma.MetadataCreateWithoutInfoInput, Prisma.MetadataUncheckedCreateWithoutInfoInput>
}

export type MetadataCreateManyInfoInputEnvelope = {
  data: Prisma.MetadataCreateManyInfoInput | Prisma.MetadataCreateManyInfoInput[]
  skipDuplicates?: boolean
}

export type MetadataUpsertWithWhereUniqueWithoutInfoInput = {
  where: Prisma.MetadataWhereUniqueInput
  update: Prisma.XOR<Prisma.MetadataUpdateWithoutInfoInput, Prisma.MetadataUncheckedUpdateWithoutInfoInput>
  create: Prisma.XOR<Prisma.MetadataCreateWithoutInfoInput, Prisma.MetadataUncheckedCreateWithoutInfoInput>
}

export type MetadataUpdateWithWhereUniqueWithoutInfoInput = {
  where: Prisma.MetadataWhereUniqueInput
  data: Prisma.XOR<Prisma.MetadataUpdateWithoutInfoInput, Prisma.MetadataUncheckedUpdateWithoutInfoInput>
}

export type MetadataUpdateManyWithWhereWithoutInfoInput = {
  where: Prisma.MetadataScalarWhereInput
  data: Prisma.XOR<Prisma.MetadataUpdateManyMutationInput, Prisma.MetadataUncheckedUpdateManyWithoutInfoInput>
}

export type MetadataScalarWhereInput = {
  AND?: Prisma.MetadataScalarWhereInput | Prisma.MetadataScalarWhereInput[]
  OR?: Prisma.MetadataScalarWhereInput[]
  NOT?: Prisma.MetadataScalarWhereInput | Prisma.MetadataScalarWhereInput[]
  id?: Prisma.StringFilter<"Metadata"> | string
  infoId?: Prisma.StringFilter<"Metadata"> | string
  icon?: Prisma.StringFilter<"Metadata"> | string
  description?: Prisma.StringFilter<"Metadata"> | string
}

export type MetadataCreateManyInfoInput = {
  id?: string
  icon: string
  description: string
}

export type MetadataUpdateWithoutInfoInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  icon?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
}

export type MetadataUncheckedUpdateWithoutInfoInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  icon?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
}

export type MetadataUncheckedUpdateManyWithoutInfoInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  icon?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
}



export type MetadataSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  infoId?: boolean
  icon?: boolean
  description?: boolean
  info?: boolean | Prisma.InfoDefaultArgs<ExtArgs>
}, ExtArgs["result"]["metadata"]>

export type MetadataSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  infoId?: boolean
  icon?: boolean
  description?: boolean
  info?: boolean | Prisma.InfoDefaultArgs<ExtArgs>
}, ExtArgs["result"]["metadata"]>

export type MetadataSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  infoId?: boolean
  icon?: boolean
  description?: boolean
  info?: boolean | Prisma.InfoDefaultArgs<ExtArgs>
}, ExtArgs["result"]["metadata"]>

export type MetadataSelectScalar = {
  id?: boolean
  infoId?: boolean
  icon?: boolean
  description?: boolean
}

export type MetadataOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "infoId" | "icon" | "description", ExtArgs["result"]["metadata"]>
export type MetadataInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  info?: boolean | Prisma.InfoDefaultArgs<ExtArgs>
}
export type MetadataIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  info?: boolean | Prisma.InfoDefaultArgs<ExtArgs>
}
export type MetadataIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  info?: boolean | Prisma.InfoDefaultArgs<ExtArgs>
}

export type $MetadataPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Metadata"
  objects: {
    info: Prisma.$InfoPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    infoId: string
    icon: string
    description: string
  }, ExtArgs["result"]["metadata"]>
  composites: {}
}

export type MetadataGetPayload<S extends boolean | null | undefined | MetadataDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MetadataPayload, S>

export type MetadataCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MetadataFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MetadataCountAggregateInputType | true
  }

export interface MetadataDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Metadata'], meta: { name: 'Metadata' } }
  /**
   * Find zero or one Metadata that matches the filter.
   * @param {MetadataFindUniqueArgs} args - Arguments to find a Metadata
   * @example
   * // Get one Metadata
   * const metadata = await prisma.metadata.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MetadataFindUniqueArgs>(args: Prisma.SelectSubset<T, MetadataFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MetadataClient<runtime.Types.Result.GetResult<Prisma.$MetadataPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Metadata that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MetadataFindUniqueOrThrowArgs} args - Arguments to find a Metadata
   * @example
   * // Get one Metadata
   * const metadata = await prisma.metadata.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MetadataFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MetadataFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MetadataClient<runtime.Types.Result.GetResult<Prisma.$MetadataPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Metadata that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetadataFindFirstArgs} args - Arguments to find a Metadata
   * @example
   * // Get one Metadata
   * const metadata = await prisma.metadata.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MetadataFindFirstArgs>(args?: Prisma.SelectSubset<T, MetadataFindFirstArgs<ExtArgs>>): Prisma.Prisma__MetadataClient<runtime.Types.Result.GetResult<Prisma.$MetadataPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Metadata that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetadataFindFirstOrThrowArgs} args - Arguments to find a Metadata
   * @example
   * // Get one Metadata
   * const metadata = await prisma.metadata.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MetadataFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MetadataFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MetadataClient<runtime.Types.Result.GetResult<Prisma.$MetadataPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Metadata that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetadataFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Metadata
   * const metadata = await prisma.metadata.findMany()
   * 
   * // Get first 10 Metadata
   * const metadata = await prisma.metadata.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const metadataWithIdOnly = await prisma.metadata.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MetadataFindManyArgs>(args?: Prisma.SelectSubset<T, MetadataFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MetadataPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Metadata.
   * @param {MetadataCreateArgs} args - Arguments to create a Metadata.
   * @example
   * // Create one Metadata
   * const Metadata = await prisma.metadata.create({
   *   data: {
   *     // ... data to create a Metadata
   *   }
   * })
   * 
   */
  create<T extends MetadataCreateArgs>(args: Prisma.SelectSubset<T, MetadataCreateArgs<ExtArgs>>): Prisma.Prisma__MetadataClient<runtime.Types.Result.GetResult<Prisma.$MetadataPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Metadata.
   * @param {MetadataCreateManyArgs} args - Arguments to create many Metadata.
   * @example
   * // Create many Metadata
   * const metadata = await prisma.metadata.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MetadataCreateManyArgs>(args?: Prisma.SelectSubset<T, MetadataCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Metadata and returns the data saved in the database.
   * @param {MetadataCreateManyAndReturnArgs} args - Arguments to create many Metadata.
   * @example
   * // Create many Metadata
   * const metadata = await prisma.metadata.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Metadata and only return the `id`
   * const metadataWithIdOnly = await prisma.metadata.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MetadataCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MetadataCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MetadataPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Metadata.
   * @param {MetadataDeleteArgs} args - Arguments to delete one Metadata.
   * @example
   * // Delete one Metadata
   * const Metadata = await prisma.metadata.delete({
   *   where: {
   *     // ... filter to delete one Metadata
   *   }
   * })
   * 
   */
  delete<T extends MetadataDeleteArgs>(args: Prisma.SelectSubset<T, MetadataDeleteArgs<ExtArgs>>): Prisma.Prisma__MetadataClient<runtime.Types.Result.GetResult<Prisma.$MetadataPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Metadata.
   * @param {MetadataUpdateArgs} args - Arguments to update one Metadata.
   * @example
   * // Update one Metadata
   * const metadata = await prisma.metadata.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MetadataUpdateArgs>(args: Prisma.SelectSubset<T, MetadataUpdateArgs<ExtArgs>>): Prisma.Prisma__MetadataClient<runtime.Types.Result.GetResult<Prisma.$MetadataPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Metadata.
   * @param {MetadataDeleteManyArgs} args - Arguments to filter Metadata to delete.
   * @example
   * // Delete a few Metadata
   * const { count } = await prisma.metadata.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MetadataDeleteManyArgs>(args?: Prisma.SelectSubset<T, MetadataDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Metadata.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetadataUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Metadata
   * const metadata = await prisma.metadata.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MetadataUpdateManyArgs>(args: Prisma.SelectSubset<T, MetadataUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Metadata and returns the data updated in the database.
   * @param {MetadataUpdateManyAndReturnArgs} args - Arguments to update many Metadata.
   * @example
   * // Update many Metadata
   * const metadata = await prisma.metadata.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Metadata and only return the `id`
   * const metadataWithIdOnly = await prisma.metadata.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MetadataUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MetadataUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MetadataPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Metadata.
   * @param {MetadataUpsertArgs} args - Arguments to update or create a Metadata.
   * @example
   * // Update or create a Metadata
   * const metadata = await prisma.metadata.upsert({
   *   create: {
   *     // ... data to create a Metadata
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Metadata we want to update
   *   }
   * })
   */
  upsert<T extends MetadataUpsertArgs>(args: Prisma.SelectSubset<T, MetadataUpsertArgs<ExtArgs>>): Prisma.Prisma__MetadataClient<runtime.Types.Result.GetResult<Prisma.$MetadataPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Metadata.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetadataCountArgs} args - Arguments to filter Metadata to count.
   * @example
   * // Count the number of Metadata
   * const count = await prisma.metadata.count({
   *   where: {
   *     // ... the filter for the Metadata we want to count
   *   }
   * })
  **/
  count<T extends MetadataCountArgs>(
    args?: Prisma.Subset<T, MetadataCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MetadataCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Metadata.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetadataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MetadataAggregateArgs>(args: Prisma.Subset<T, MetadataAggregateArgs>): Prisma.PrismaPromise<GetMetadataAggregateType<T>>

  /**
   * Group by Metadata.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetadataGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MetadataGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MetadataGroupByArgs['orderBy'] }
      : { orderBy?: MetadataGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MetadataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMetadataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Metadata model
 */
readonly fields: MetadataFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Metadata.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MetadataClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  info<T extends Prisma.InfoDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.InfoDefaultArgs<ExtArgs>>): Prisma.Prisma__InfoClient<runtime.Types.Result.GetResult<Prisma.$InfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Metadata model
 */
export interface MetadataFieldRefs {
  readonly id: Prisma.FieldRef<"Metadata", 'String'>
  readonly infoId: Prisma.FieldRef<"Metadata", 'String'>
  readonly icon: Prisma.FieldRef<"Metadata", 'String'>
  readonly description: Prisma.FieldRef<"Metadata", 'String'>
}
    

// Custom InputTypes
/**
 * Metadata findUnique
 */
export type MetadataFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Metadata
   */
  select?: Prisma.MetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Metadata
   */
  omit?: Prisma.MetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetadataInclude<ExtArgs> | null
  /**
   * Filter, which Metadata to fetch.
   */
  where: Prisma.MetadataWhereUniqueInput
}

/**
 * Metadata findUniqueOrThrow
 */
export type MetadataFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Metadata
   */
  select?: Prisma.MetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Metadata
   */
  omit?: Prisma.MetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetadataInclude<ExtArgs> | null
  /**
   * Filter, which Metadata to fetch.
   */
  where: Prisma.MetadataWhereUniqueInput
}

/**
 * Metadata findFirst
 */
export type MetadataFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Metadata
   */
  select?: Prisma.MetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Metadata
   */
  omit?: Prisma.MetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetadataInclude<ExtArgs> | null
  /**
   * Filter, which Metadata to fetch.
   */
  where?: Prisma.MetadataWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Metadata to fetch.
   */
  orderBy?: Prisma.MetadataOrderByWithRelationInput | Prisma.MetadataOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Metadata.
   */
  cursor?: Prisma.MetadataWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Metadata from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Metadata.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Metadata.
   */
  distinct?: Prisma.MetadataScalarFieldEnum | Prisma.MetadataScalarFieldEnum[]
}

/**
 * Metadata findFirstOrThrow
 */
export type MetadataFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Metadata
   */
  select?: Prisma.MetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Metadata
   */
  omit?: Prisma.MetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetadataInclude<ExtArgs> | null
  /**
   * Filter, which Metadata to fetch.
   */
  where?: Prisma.MetadataWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Metadata to fetch.
   */
  orderBy?: Prisma.MetadataOrderByWithRelationInput | Prisma.MetadataOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Metadata.
   */
  cursor?: Prisma.MetadataWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Metadata from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Metadata.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Metadata.
   */
  distinct?: Prisma.MetadataScalarFieldEnum | Prisma.MetadataScalarFieldEnum[]
}

/**
 * Metadata findMany
 */
export type MetadataFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Metadata
   */
  select?: Prisma.MetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Metadata
   */
  omit?: Prisma.MetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetadataInclude<ExtArgs> | null
  /**
   * Filter, which Metadata to fetch.
   */
  where?: Prisma.MetadataWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Metadata to fetch.
   */
  orderBy?: Prisma.MetadataOrderByWithRelationInput | Prisma.MetadataOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Metadata.
   */
  cursor?: Prisma.MetadataWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Metadata from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Metadata.
   */
  skip?: number
  distinct?: Prisma.MetadataScalarFieldEnum | Prisma.MetadataScalarFieldEnum[]
}

/**
 * Metadata create
 */
export type MetadataCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Metadata
   */
  select?: Prisma.MetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Metadata
   */
  omit?: Prisma.MetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetadataInclude<ExtArgs> | null
  /**
   * The data needed to create a Metadata.
   */
  data: Prisma.XOR<Prisma.MetadataCreateInput, Prisma.MetadataUncheckedCreateInput>
}

/**
 * Metadata createMany
 */
export type MetadataCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Metadata.
   */
  data: Prisma.MetadataCreateManyInput | Prisma.MetadataCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Metadata createManyAndReturn
 */
export type MetadataCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Metadata
   */
  select?: Prisma.MetadataSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Metadata
   */
  omit?: Prisma.MetadataOmit<ExtArgs> | null
  /**
   * The data used to create many Metadata.
   */
  data: Prisma.MetadataCreateManyInput | Prisma.MetadataCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetadataIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Metadata update
 */
export type MetadataUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Metadata
   */
  select?: Prisma.MetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Metadata
   */
  omit?: Prisma.MetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetadataInclude<ExtArgs> | null
  /**
   * The data needed to update a Metadata.
   */
  data: Prisma.XOR<Prisma.MetadataUpdateInput, Prisma.MetadataUncheckedUpdateInput>
  /**
   * Choose, which Metadata to update.
   */
  where: Prisma.MetadataWhereUniqueInput
}

/**
 * Metadata updateMany
 */
export type MetadataUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Metadata.
   */
  data: Prisma.XOR<Prisma.MetadataUpdateManyMutationInput, Prisma.MetadataUncheckedUpdateManyInput>
  /**
   * Filter which Metadata to update
   */
  where?: Prisma.MetadataWhereInput
  /**
   * Limit how many Metadata to update.
   */
  limit?: number
}

/**
 * Metadata updateManyAndReturn
 */
export type MetadataUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Metadata
   */
  select?: Prisma.MetadataSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Metadata
   */
  omit?: Prisma.MetadataOmit<ExtArgs> | null
  /**
   * The data used to update Metadata.
   */
  data: Prisma.XOR<Prisma.MetadataUpdateManyMutationInput, Prisma.MetadataUncheckedUpdateManyInput>
  /**
   * Filter which Metadata to update
   */
  where?: Prisma.MetadataWhereInput
  /**
   * Limit how many Metadata to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetadataIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Metadata upsert
 */
export type MetadataUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Metadata
   */
  select?: Prisma.MetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Metadata
   */
  omit?: Prisma.MetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetadataInclude<ExtArgs> | null
  /**
   * The filter to search for the Metadata to update in case it exists.
   */
  where: Prisma.MetadataWhereUniqueInput
  /**
   * In case the Metadata found by the `where` argument doesn't exist, create a new Metadata with this data.
   */
  create: Prisma.XOR<Prisma.MetadataCreateInput, Prisma.MetadataUncheckedCreateInput>
  /**
   * In case the Metadata was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MetadataUpdateInput, Prisma.MetadataUncheckedUpdateInput>
}

/**
 * Metadata delete
 */
export type MetadataDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Metadata
   */
  select?: Prisma.MetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Metadata
   */
  omit?: Prisma.MetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetadataInclude<ExtArgs> | null
  /**
   * Filter which Metadata to delete.
   */
  where: Prisma.MetadataWhereUniqueInput
}

/**
 * Metadata deleteMany
 */
export type MetadataDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Metadata to delete
   */
  where?: Prisma.MetadataWhereInput
  /**
   * Limit how many Metadata to delete.
   */
  limit?: number
}

/**
 * Metadata without action
 */
export type MetadataDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Metadata
   */
  select?: Prisma.MetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Metadata
   */
  omit?: Prisma.MetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetadataInclude<ExtArgs> | null
}
